gacm(){
  echo "Committing code..."
  git add --all && git commit -m $1
}

clean_docker() {
  if [ ! -z "$1" ]; then
    images=$(docker images -a | grep $1 | awk '{ print $3 }')
    if [ ! -z "$images" ]; then
      docker rmi -f $(docker images -a | grep $1 | awk '{ print $3 }')
    fi
  fi
  docker rm -v $(docker ps -a -q -f status=exited)
  docker rmi $(docker images -f "dangling=true" -q)
}

dl(){
  if [[ $1 == *"soundcloud.com"* ]]; then
    youtube-dl -o "~/Music/%(uploader)s - %(title)s.%(ext)s" $1
  else
    youtube-dl -x --audio-format mp3 -o "~/Music/%(title)s.%(ext)s" $1
  fi
}

syncb() {
  local default_branch=$(git remote show origin | grep 'HEAD branch' -m 1 | cut -d' ' -f5)
  local branch="${1:-$default_branch}"
  git fetch origin $branch:$branch --update-head-ok --no-tags
}

gitdb() {
  if [ -z "$1" ]
  then
    echo "Provide a git branch substring to delete it"
    exit 0
  fi
  git branch | grep -Ei "$1" | grep -Eiv "\*" | while read -r line ; do
    gb -D $line
  done
}

kall() {
  kubectl get $1 --all-namespaces
}

find_po() {
  k get po | grep $1 | awk '{ print $1 }'
}

# print current wifi network
ssid() {
  echo $(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}')
}

# Print current wifi settings
wifi(){
  if [ -z "$1" ]
  then
     echo "SSID: $(ssid)"
     security find-generic-password -ga $currentnetwork | tr -d '\n' | grep "password:"
  else
     echo "SSID: $1"
     security find-generic-password -ga $1 | tr -d '\n' | grep "password:"
  fi
}

kill_process_on_port() {
  kill $(lsof -i tcp:$1 | tail -n 1 | awk {'print $2'})
}

reload_zsh() {
  source ~/.zshrc
}


ssh_desktop() {
  DESKTOP_IP=192.168.86.38
  echo "Running on wifi $(ssid)"
  ssh ryan@$DESKTOP_IP
}
# work specific
make_test_spec(){
   gh run view --log --job=$1 | grep "Print test spec" | grep -o "\.\.\/build.*" >> /tmp/test_spec   
}

current_codespace(){
  echo $(gh codespace list --json name | jq '.[0].name' -r)
}

cs_ssh() {
  gh codespace ssh --codespace $(current_codespace) -- -t 'zsh -l'
} 

cs_ld(){
  gh codespace ssh --codespace $(current_codespace) -- -t 'lazydocker'
}

commit_ticket(){
  ticket_url=$1
  description=$2
  gacm "[SC-$(echo "$ticket_url" | grep -oP 'story/\K\d+')] $description"
}



lint_changed(){
  trunk="main"
  branch_name=$(git rev-parse --abbrev-ref HEAD)
  main_ancestor=$(git merge-base $branch_name $trunk)
  changed_files=$(git diff --name-only HEAD..$main_ancestor)
  num_files_changed=$(echo "$changed_files" | wc -l)
  echo "Running eslint against $num_files_changed files"
  npx eslint --fix $(echo "$changed_files")
}

install_portainer() {
  docker volume inspect portainer_data >/dev/null 2>&1 || docker volume create portainer_data
  docker run -d \
    -p 8000:8000 \
    -p 9443:9000 \
    --name portainer \
    --restart=always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v portainer_data:/data portainer/portainer-ce:latest \
    --http-enabled
}

# Git convenience functions
gcaam() {
  # Function to git add all and commit with a message without needing quotes
  # Usage: gcaam your commit message here (no quotes needed)
  git add --all && git commit -m "$*"
}

# Smart interactive rebase function
gri() {
  # Interactive rebase with smart commit counting
  # Usage: 
  #   gri            - Rebase interactively against where current branch diverged from main branch
  #   gri 5          - Rebase interactively against HEAD~5
  #   gri main       - Rebase interactively against main branch
  #   gri <branch>   - Rebase interactively against specified branch
  
  local base_branch="$(git_main_branch)"
  local num_commits
  
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    # If first argument is a number, use it as the number of commits
    num_commits=$1
    echo "Rebasing interactively against HEAD~$num_commits..."
    EDITOR="cursor --wait" git rebase -i HEAD~$num_commits
  elif [[ -n "$1" ]]; then
    # If argument is provided and not a number, use it as the branch name
    echo "Rebasing interactively against $1..."
    EDITOR="cursor --wait" git rebase -i $1
  else
    # Otherwise, rebase against the fork point from main branch
    local fork_point=$(git merge-base HEAD $base_branch)
    echo "Rebasing interactively against fork point from $base_branch..."
    EDITOR="cursor --wait" git rebase -i $fork_point
  fi
}

# Configure Git to use an appropriate editor
configure_git_editor() {
  if command -v cursor &> /dev/null; then
    echo "Setting Cursor as the Git editor..."
    git config --global core.editor "cursor --wait"
  elif command -v code &> /dev/null; then
    echo "Setting VS Code as the Git editor..."
    git config --global core.editor "code --wait"
  elif command -v vim &> /dev/null; then
    echo "Setting Vim as the Git editor..."
    git config --global core.editor "vim"
  elif command -v nano &> /dev/null; then
    echo "Setting Nano as the Git editor..."
    git config --global core.editor "nano"
  else
    echo "No suitable editor found. Using default Git editor."
  fi
}

# Run git editor configuration automatically when this file is sourced
configure_git_editor