# config for codespaces
export GIT_EDITOR="code --wait"
export EDITOR="code --wait"

WC_PKG="@vanta/web-client"
# aliases
alias gt="turbo generate-types --filter @vanta/web --filter $WC_PKG"
alias gtc="turbo generate-types --filter $WC_PKG"

# Better syncdot function that can handle local changes
syncdot() {
  local dotfiles_dir="/workspaces/.codespaces/.persistedshare/dotfiles"
  echo "Syncing dotfiles from $dotfiles_dir..."
  
  # Save current directory
  local current_dir=$(pwd)
  
  # Go to dotfiles directory
  cd "$dotfiles_dir" || return 1
  
  # Check for local changes
  if [[ -n "$(git status --porcelain)" ]]; then
    echo "Local changes detected in dotfiles."
    echo "Committing local changes before pulling..."
    git add .
    git commit -m "Auto-commit local Codespace changes"
  fi
  
  # Pull latest changes
  git pull
  
  # Go back to original directory
  cd "$current_dir"
  
  # Reload zsh configuration
  echo "Reloading zsh configuration..."
  source ~/.zshrc
  
  echo "Dotfiles sync complete!"
}

alias web_start="docker-compose up --detach web.internal web-client.internal"
alias rstc="restart_container"
alias rstc_w="restart_container web.internal"
alias rstc_wc="restart_container obsidian_web-client.internal_1"

alias docker_ps="docker ps -a --format '{{.Names}}'"
alias logs_web="docker compose logs web.internal --tail 100 --no-log-prefix"
alias logs_wc="docker compose logs web-client.internal --tail 100 --no-log-prefix"

alias yw="nocorrect yarn workspace"
alias ypp="yarn post-pull"

alias mdwc='make dev-replace web-client'
alias mdw='make dev-replace web'
alias mds='make dev-storybook'

# Functions
login_link(){
  json_line=$(logs_web 2>/dev/null  | \
   grep 'loginLink":' | \
   tail -n 1 )
  echo "{$json_line}" | jq -r .loginLink
}

# Git convenience functions
gcaam() {
  # Function to git add all and commit with a message
  # Usage: gcaam your commit message here (no quotes needed)
  git add --all && git commit -m "$*"
}

function restart_container() {
  docker_ps | grep $1 | xargs -I {} docker restart {}
}

lint_ts(){
  files_to_lint=$(git diff HEAD --name-only --diff-filter=d | grep -E '.tsx?$')
  echo "Linting $(echo $files_to_lint | wc -l) files"
  start=`date +%s`
  npx eslint --fix $(git diff HEAD --name-only --diff-filter=d | grep -E '.tsx?$' )
  end=`date +%s`
  runtime=$((end-start))
  echo "Linted in $runtime seconds"
}

# GitHub Codespaces specific configuration

# Set up Codespaces environment
echo "Setting up Codespaces environment..."

# Ensure git aliases work properly
if [ -f ~/.aliases ]; then
  echo "Loading Git aliases..."
  source ~/.aliases
fi

# Ensure git custom functions work properly
if [ -f ~/.functions ]; then
  echo "Loading Git functions..."
  source ~/.functions
fi

# Ensure custom zsh settings are loaded
if [ -f ~/.zsh_custom ]; then
  echo "Loading custom ZSH settings..."
  source ~/.zsh_custom
fi

# Install fzf if it's not already installed
if ! command -v fzf >/dev/null 2>&1; then
  echo "Installing fzf for faster git operations..."
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install --all
fi

# Verify that the git aliases are properly loaded
alias | grep "^g" | grep "git" | wc -l | xargs -I {} echo "Loaded {} git aliases"

echo "Codespaces configuration complete!"

